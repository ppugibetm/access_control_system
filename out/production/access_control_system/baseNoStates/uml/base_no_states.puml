@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0

class Webserver {
- {static} PORT :int
- {static} FORMATTER : DateTimeFormatter
+ Webserver()
}

class SocketThread {
- insocked : Socked
- makeRequest(tokens : String[]) : Request
- makeRequestReader(tokens : String[]) : RequestReader
- makeRequestArea(tokens : String[]) : RequestArea
- makeHeaderAnswer() : String
- makeJsonAnswer(request : Request) : String
+ run()
}

Webserver +-right- SocketThread

note right of SocketThread
inner class
of Webserver
end note

class DirectoryDoors {
- {static} allDoors : Door[]
+ {static} makeDoors()
+ {static} findDoorById(id : String) : Door
+ {static} getAllDoors() : Door[]
}

DirectoryDoors --> "*" Door : "allDoors"

class DirectoryUsers {
- {static} users : User[]
+ {static} makeUsers()
+ {static} findUserByCredential(credential : String) : User
}

DirectoryUsers --> "*" User : "users"

class Door {
- id : String
- closed : boolean
- state : DoorState
+ Door(id : String)
+ processRequest(request : RequestReader)
+ setState(doorState : DoorState)
+ toJson() : JSONObject
+ getId() : String
+ toString() : String
+ isClosed() :boolean
+ setClosed(b : boolean)
+ getStateName() : String
+ doAction(action : String)
}

Door --> DoorState : "state"

abstract class DoorState {
+ DoorState(door : Door)
+ open()
+ close()
+ lock()
+ unlock()
+ unlock_shortly()
+ getName() : String
}

DoorState <|-- Locked
DoorState <|-- Unlocked
DoorState <|-- UnlockedShortly
DoorState <|-- Propped

class Locked {
+ DoorState(door : Door)
+ open()
+ close()
+ lock()
+ unlock()
+ unlock_shortly()
+ getName() : String
}

class Unlocked {
+ DoorState(door : Door)
+ open()
+ close()
+ lock()
+ unlock()
+ unlock_shortly()
+ getName() : String
}

class UnlockedShortly {
+ UnlockedShortly(door : Door)
+ open()
+ close()
+ lock()
+ unlock()
+ unlock_shortly()
+ getName() : String
}

class Propped {
+ DoorState(door: Door)
+ open()
+ close()
+ lock()
+ unlock()
+ unlock_shortly()
+ getName() : String
}

class User {
- name : String
- credential : String
- group : String
- areas : List<Area>
+ User(name : String, credential : String, group : String, areas : List<Area>)
+ getCredential() : String
+ getGroup() : String
+ addAccessArea(area : Area)
+ hasAcces(area : Area) : boolean
+ getAccessAreas() : List<Area>
+ toString() : String
}

class DirectoryAreas {
    - {static} root : Area
    - {static} allDoors : Door[]
    - {static} allAreas : Area[]
    + {static} makeAreas(doors : ArrayList<Door>)
    + {static} findAreaById(id : String) : Area
    + {static} findDoorById(id : String) : Door
    + {static} getAllDoors() : List<Door>
}

DirectoryAreas --> "*" Door : "allDoors"
DirectoryAreas --> "*" Area : "allAreas"

abstract class Area {
    - name : String
    - parent : Area
    - children : List<Area>
    + Area(name : String, parent : Area)
    + getParent() : Area
    + getName() : String
    + lock()
    + unlock()
    + getDoorsGivingAccess() : List<Door>
    + addArea(area : Area)
    + containsArea(area : Area) : boolean
    + getAreas() : List<Area>
}

class Partition extends Area {
    - areas : List<Area>
    + Partition(name : String, parent : Area)
    + addArea(area : Area)
    + getDoorsGivingAccess() : List<Door>
    + containsArea(area : Area) : boolean
    + getAreas() : List<Area>
}

class Space extends Area {
    - doors : List<Door>
    + Space(name : String, parent : Area)
    + addDoor(door : Door)
    + getDoorsGivingAccess() : List<Door>
    + addArea(area : Area)
    + containsArea(area : Area) : boolean
    + getAreas() : List<Area>
}

Partition --> "*" Area : "areas"
Space --> "*" Door : "doors"

class Main {
+ {static} main(args : String)
}

class Clock {
+ Clock()
+ startTimer(delay : int)
}

UnlockedShortly --> Clock : "observes"
Clock --|> UnlockedShortly : "notifies"

note right of Main::main
DiretoryUsers.makeUsers()
DirectoryAreas.makeAreas(DirectoryDoors.makeDoors())
new Webserver()
end note

Main -[hidden]down- Webserver
Webserver -[hidden]down- DirectoryDoors
DirectoryDoors -[hidden]right- DirectoryUsers
@enduml
